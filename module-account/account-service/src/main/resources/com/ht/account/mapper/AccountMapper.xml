<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ht.account.mapper.AccountMapper">

	<!-- 查询列表定义 -->
	<sql id="allColumn" >
		id, login_name, password, name, mobile, status, description, add_time, modify_time
	</sql>

    <!-- 联合查询列表定义 -->
	<resultMap id="baseResultMap" type="com.ht.account.mapper.entity.Account" >
    	<id 	column="id" 				property="id" 				jdbcType="VARCHAR" />
		<result column="login_name" 		property="loginName" 		jdbcType="VARCHAR" />
		<result column="password" 			property="password" 		jdbcType="VARCHAR" />
		<result column="name" 				property="name" 			jdbcType="VARCHAR" />
		<result column="mobile" 			property="mobile" 			jdbcType="VARCHAR" />
		<result column="status" 			property="status" 			jdbcType="INTEGER" />
		<result column="description" 		property="description" 		jdbcType="VARCHAR" />
		<result column="add_time" 			property="addTime"			/>
		<result column="modify_time" 		property="modifyTime"		/>
  	</resultMap>

	<!-- 公共方法定义 -->
	<insert id="insert" parameterType="com.ht.account.mapper.entity.Account">
		insert into account (
			id,
			login_name,
			password,
			name,
			mobile,
			status,
			description
      	)
    	values (
			#{id},
			#{loginName},
			#{password},
			#{name},
			#{mobile},
			#{status},
			#{description}
      	)
	</insert>
	
	<update id="update" parameterType="com.ht.account.mapper.entity.Account">
		update account
		<set>
			name				= #{name},
			mobile				= #{mobile},
			status				= #{status},
			description			= #{description}
		</set>
    	where 
    		id = #{id}
	</update>

	<update id="updateByPrimaryKeySelective" parameterType="Map">
		update account
		<set>
			<if test="loginName != null" >
				login_name 	= #{loginName},
			</if>
			<if test="password != null" >
				password 	= #{password},
			</if>
			<if test="name != null" >
				name 		= #{name},
			</if>
			<if test="mobile != null" >
				mobile 		= #{mobile},
			</if>
			<if test="status != null" >
				status 		= #{status},
			</if>
			<if test="description != null" >
				description = #{description},
			</if>
			<if test="deleted != null" >
				deleted 	= #{deleted},
			</if>
		</set>
		where
			id in
			<foreach collection="id" index="index" item="item" open="(" separator="," close=")">
				#{item}
			</foreach>
	</update>
	
	<delete id="delete" parameterType="String">
		delete from account where id = #{id}
	</delete>
	
	<delete id="deleteByIds" parameterType="List">
		delete from account
    	where 
    		id in
    	 <foreach collection="id" index="index" item="item" open="(" separator="," close=")">
    	 	#{item}
    	 </foreach>
	</delete>
  
	<select id="findById" parameterType="String" resultMap="baseResultMap">
		select
			<include refid="allColumn" />
		from account
		where
			id = #{id}
	</select>
	
	<select id="query" parameterType="Map" resultMap="baseResultMap">
	  	select
			<include refid="allColumn" />
	  	from account
		<where>
			deleted = 1
			<if test="loginName != null and loginName != ''">
				and login_name	= #{loginName}
			</if>
			<if test="mobile != null and mobile != ''">
				and mobile	= #{mobile}
			</if>
			<if test="status != null and status != 0">
				and status	= #{status}
			</if>
			<if test="keyword != null and keyword != ''">
				and (
					login_name 		like concat('%', #{keyword}, '%') or
					name 			like concat('%', #{keyword}, '%') or
					mobile 			like concat('%', #{keyword}, '%') or
					description 	like concat('%', #{keyword}, '%')
				)
			</if>
		</where>
		order by
			<if test="order != null and order != ''">
				convert(${order} using gbk)  ${sort},
			</if>
			modify_time desc
 	</select>
  	
  	<!-- 个性方法定义 -->
	<select id="exists" parameterType="Map" resultType="java.lang.Integer">
		select
			ifnull(count(*), 0)
		from account
		<where>
			deleted = 1
			and login_name	= #{loginName}
			<if test="id != null and id != ''">
				and id		!= #{id}
			</if>
		</where>
	</select>

</mapper>